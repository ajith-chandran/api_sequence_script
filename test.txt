import requests
import time
import json
import os
import argparse
import random
import string
import sys
import threading
from jinja2 import Template
from datetime import datetime
from colorama import Fore, Style, init as colorama_init

colorama_init(autoreset=True)

class APIRunner:
    def __init__(self, sequence_name, environment):
        base_dir = os.path.dirname(os.path.abspath(__file__))
        config_path = os.path.join(base_dir, 'config.json')
        with open(config_path, 'r') as f:
            self.config = json.load(f)

        self.sequence_name = sequence_name
        self.environment = environment
        self.variables = self.config.get('env', {}).copy()
        self.generators = self.config.get('generators', {})
        self.base_dir = base_dir
        self.skip_retry_flag = False

    def listen_for_skip(self):
        print("Press 's' then Enter at any time to skip retries for the current step.")
        while True:
            if sys.stdin.read(1).lower() == 's':
                self.skip_retry_flag = True
                break

    def render_template(self, template_str):
        template = Template(template_str)
        return template.render(**self.variables)

    def extract_variables(self, extract_config, response_json):
        for var_name, path in extract_config.items():
            value = self.get_nested_value(response_json, path)
            if value is not None:
                self.variables[var_name] = value
            else:
                print(f"Warning: Could not extract {var_name} from path {path}")

    def load_template(self, template_path):
        full_path = os.path.join(self.base_dir, template_path)
        with open(full_path, 'r') as f:
            return f.read()

    def evaluate_success_condition(self, condition, response_json):
        failed_messages = []

        def evaluate(single_condition):
            value = self.get_nested_value(response_json, single_condition['path'])
            result = False
            if 'equals' in single_condition:
                expected = self.render_template(single_condition['equals'])
                result = str(value).lower() == expected.lower()
            elif 'exists' in single_condition:
                result = single_condition['exists'] == (value is not None)
            elif 'not_exists' in single_condition:
                result = single_condition['not_exists'] == (value is None)

            if not result and 'message' in single_condition:
                rendered_msg = self.render_template(single_condition['message'])
                failed_messages.append(rendered_msg)
            return result

        if isinstance(condition, dict) and 'conditions' in condition:
            logic = condition.get('logic', 'AND').upper()
            conditions = condition['conditions']
            results = [evaluate(c) for c in conditions]
            if not (all(results) if logic == 'AND' else any(results)):
                for msg in failed_messages:
                    print(f"[Condition Failed] {msg}")
                return False
            return True
        elif isinstance(condition, list):
            results = [evaluate(c) for c in condition]
            if not all(results):
                for msg in failed_messages:
                    print(f"[Condition Failed] {msg}")
                return False
            return True
        else:
            return evaluate(condition)

    def generate_value(self, spec):
        if spec['type'] == 'pattern':
            result = ''
            for ch in spec['pattern']:
                if ch == '#':
                    result += random.choice(string.digits)
                elif ch == '@':
                    result += random.choice(string.ascii_letters)
                else:
                    result += ch
            return result
        elif spec['type'] == 'alphanumeric':
            return ''.join(random.choices(string.ascii_letters + string.digits, k=spec.get('length', 10)))
        return ''

    def apply_dynamic_variables(self, dynamic_var_config):
        for var_name, generator_key in dynamic_var_config.items():
            spec = self.generators.get(generator_key)
            if spec:
                self.variables[var_name] = self.generate_value(spec)

    def get_nested_value(self, json_obj, path):
        keys = path.split('.')
        value = json_obj
        try:
            for key in keys:
                if isinstance(value, list) and key.isdigit():
                    value = value[int(key)]
                else:
                    lower_keys = {k.lower(): k for k in value.keys()} if isinstance(value, dict) else {}
                    actual_key = lower_keys.get(key.lower(), key)
                    value = value[actual_key]
            return value
        except (KeyError, IndexError, TypeError, ValueError):
            return None

    def print_outputs(self, print_output_config, response_json, payload_json):
        for item in print_output_config:
            message_template = item.get("message", "")
            path = item.get("path")
            env_var = item.get("env_var")

            value = None
            if path:
                if path.startswith("payload."):
                    actual_path = path.replace("payload.", "", 1)
                    value = self.get_nested_value(payload_json, actual_path)
                else:
                    value = self.get_nested_value(response_json, path)
            elif env_var:
                value = self.variables.get(env_var)

            colored_value = f"{Fore.GREEN}{value}{Style.RESET_ALL}"
            message = message_template.replace("{{value}}", colored_value)
            print(message)

    def interruptible_sleep(self, duration):
        waited = 0
        interval = 0.2
        while waited < duration:
            if self.skip_retry_flag:
                break
            time.sleep(interval)
            waited += interval

    def make_request(self, step_name):
        step = self.config['api_calls'][step_name]
        system = step.get('system')
        env_systems = self.config.get('environments', {}).get(self.environment, {})
        base_url = env_systems.get(system)

        if not base_url:
            raise ValueError(f"Base URL for system '{system}' in environment '{self.environment}' is not defined")

        dynamic_vars = step.get('dynamic_variables', {})
        if dynamic_vars:
            self.apply_dynamic_variables(dynamic_vars)

        template_path = step.get('template', None)
        extract = step.get('extract', {})
        timeout = step.get('timeout', 10)
        duration_limit = step.get('duration_limit', 300)
        retry_delay = step.get('retry_delay', 2)
        retries = step.get('retries')  # Optional
        success_condition = step.get('success_condition')
        print_output = step.get('print_output', [])
        method = step.get('method', 'GET').upper()

        start_time = datetime.now()
        attempt = 0
        approx_total_attempts = (duration_limit // retry_delay) if retries is None else retries

        self.skip_retry_flag = False
        threading.Thread(target=self.listen_for_skip, daemon=True).start()

        while True:
            if retries is not None and attempt >= retries:
                raise Exception(f"Failed to call {step_name} after {retries} retries")

            if retries is None and (datetime.now() - start_time).total_seconds() > duration_limit:
                raise TimeoutError(f"Exceeded total duration limit for {step_name}")

            if self.skip_retry_flag:
                print(f"Skipping retries for {step_name} due to user request.")
                raise Exception("User skipped retry")

            attempt += 1
            remaining = (retries - attempt) if retries is not None else (approx_total_attempts - attempt)

            endpoint_template = self.render_template(step['endpoint'])
            url = base_url + endpoint_template
            headers = json.loads(self.render_template(json.dumps(step.get('headers', {}))))

            body = None
            if template_path:
                template_str = self.load_template(template_path)
                rendered_body = self.render_template(template_str)
                body = json.loads(rendered_body)

            try:
                response = requests.request(
                    method,
                    url,
                    headers=headers,
                    json=body,
                    timeout=timeout
                )
                response.raise_for_status()
                response_json = response.json()

                if extract:
                    self.extract_variables(extract, response_json)

                if success_condition:
                    if self.evaluate_success_condition(success_condition, response_json):
                        print(f"{Fore.GREEN}Success condition met for {step_name}.{Style.RESET_ALL}")
                        if print_output:
                            self.print_outputs(print_output, response_json, body or {})
                        return response
                    else:
                        retry_msg = "Condition not satisfied"
                        if isinstance(success_condition, dict) and 'message' in success_condition:
                            retry_msg = self.render_template(success_condition.get("message", retry_msg))
                        print(f"{step_name} - Attempt {attempt} failed: {retry_msg} | Remaining: {remaining} | Next retry in {retry_delay}s")
                        raise Exception("Condition not satisfied")
                else:
                    if print_output:
                        self.print_outputs(print_output, response_json, body or {})
                    return response

            except requests.RequestException as e:
                print(f"{Fore.RED}Request failed for {step_name}: {e}{Style.RESET_ALL}")
            except Exception as e:
                if str(e) != "Condition not satisfied":
                    print(f"{Fore.RED}{step_name} failed due to unexpected error: {e}{Style.RESET_ALL}")
                if self.skip_retry_flag:
                    step_config = self.config['api_calls'].get(step_name, {})
                    if not step_config.get("proceed_on_failure", False):
                        raise
                    else:
                        break

            self.interruptible_sleep(retry_delay)

    def run(self):
        sequence = self.config['sequences'][self.sequence_name]
        for step_name in sequence:
            try:
                self.make_request(step_name)
            except Exception as e:
                print(f"Step {step_name} failed: {e}")
                step_config = self.config['api_calls'].get(step_name, {})
                if not step_config.get("proceed_on_failure", False):
                    print("Halting execution due to failure.")
                    break


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run API sequence from config")
    parser.add_argument('sequence', help="Sequence name to execute")
    parser.add_argument('environment', help="Environment to use (e.g. test2, test3, QA2, QA3)")
    args = parser.parse_args()

    runner = APIRunner(args.sequence, args.environment)
    runner.run()